@using F1StrategySite.Data

@if (!isLoaded)
{
    <div class="flex items-center justify-center min-h-screen bg-[#111418]">
        <img src="https://static.vecteezy.com/system/resources/previews/036/647/604/non_2x/race-car-wheel-free-vector.png" alt="Loading Tyre" class="loading-tyre" style="width: 64px; height: 64px;" />
        <style>
            @@keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            .loading-tyre {
                animation: spin 1s linear infinite;
                display: inline-block;
            }
        </style>
    </div>
}
else
{
    @for(int i = 0; i < StrategiesArr.Length; i++)
    {
        var strategyOptions = StrategiesArr[i];

        <div class="grid grid-cols-[8rem,1fr,5rem] items-center gap-x-4">
            <div class="text-right">
                <p class="font-bold text-lg text-white">@strategyOptions.Strategy</p>
                <p class="text-sm text-[var(--text-secondary)]">@strategyOptions.StrategyFrequencyText</p>
            </div>

            <div class="race-bar-container" style="display: flex;">
                @for(int j = 0; j < strategyOptions.Strategy.Length; j++)
                {
                    char compound = strategyOptions.Strategy[j];
                    var color = compound == 'S' ? "bg-[var(--soft-tyre)]"
                               : compound == 'M' ? "bg-[var(--medium-tyre)]"
                               : compound == 'H' ? "bg-[var(--hard-tyre)]"
                               : "bg-gray-500";

                    (float width, float scaledStint) = GetStintWidthScale(@stintLifes[i][j], i);

                    <div class="tyre-segment @color" style="width: @width%;">
                        <span class="opacity-80">@Math.Round(scaledStint)</span> 
                    </div>
                }
            </div>
            <div class="text-left mono-font text-[var(--text-secondary)] text-sm">
                @{ var stopCount = strategyOptions.Strategy.Length - 1; }
                <span class="font-medium text-white">@stopCount</span> @(stopCount == 1 ? "Stop" : "Stops")
            </div>
        </div>
    }
}



@code {
    [Parameter] public string GrandPrixName { get; set; }
    [Parameter] public int TotalLaps { get; set; }
    [Parameter] public int Year { get; set; } = 2025;

    private Strategies[] StrategiesArr { get; set; } = Array.Empty<Strategies>();
    private float[][] stintLifes = Array.Empty<float[]>();
    private bool isLoaded = false;

    private (float, float) GetStintWidthScale(float stintLength, int stintNum)
    {
        const int maxWidth = 100;
        float sumOfStints = stintLifes[stintNum].Sum();
        float stintWidth = stintLength * (maxWidth / sumOfStints);
        float scaledStint = stintLength * (TotalLaps / sumOfStints);
        return (stintWidth, scaledStint);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStrategyDataAsync();
            StateHasChanged(); 
        }
    }

    private async Task LoadStrategyDataAsync()
    {
        var gpStrategies = new Strategies(GrandPrixName);

        StrategiesArr = await gpStrategies.GetStrategiesAsync();

        var tasks = StrategiesArr.Select(s => s.GetStrategyStintsAsync(Year));
        stintLifes = await Task.WhenAll(tasks);

        isLoaded = true;
    }
}

