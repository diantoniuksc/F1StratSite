@using F1StrategySite.Data
@inject IJSRuntime JS

<script src="/js/centerAfterBars.js"></script>

@if (!isLoaded)
{
    <div class="bg-card p-6">
        <div class="animate-pulse space-y-4">
            <div class="h-6 bg-[#262626] rounded w-1/3"></div>
            <div class="h-4 bg-[#262626] rounded w-1/4"></div>
            <div class="h-10 bg-[#262626] rounded"></div>
            <div class="h-10 bg-[#262626] rounded"></div>
        </div>
    </div>
}
else
{
    <!-- Root defines the total height to split between bars and image -->
    <div id="strategy-root" class="flex flex-col h-[72vh]">  @* pick a height you like *@

        <!-- Pseudo-container for the colourful bars (natural height) -->
        <div id="bars-wrapper" class="shrink-0 space-y-3">
            @for (int i = 0; i < StrategiesArr.Length; i++)
            {
                var strategyOptions = StrategiesArr[i];

                <div class="grid grid-cols-[8rem,1fr,5rem] items-center gap-x-4">
                    <div class="text-right">
                        <p class="font-bold text-lg text-white">@strategyOptions.Strategy</p>
                        <p class="text-sm text-[var(--text-secondary)]">@strategyOptions.StrategyFrequencyText</p>
                    </div>

                    <div class="race-bar-container flex">
                        @for (int j = 0; j < strategyOptions.Strategy.Length; j++)
                        {
                            char compound = strategyOptions.Strategy[j];
                            var color = compound == 'S' ? "bg-[var(--soft-tyre)]"
                                       : compound == 'M' ? "bg-[var(--medium-tyre)]"
                                       : compound == 'H' ? "bg-[var(--hard-tyre)]"
                                       : "bg-gray-500";

                            (float width, float scaledStint) = GetStintWidthScale(@stintLifes[i][j], i);

                            <div class="tyre-segment @color" style="width:@width%;">
                                <span class="opacity-80">@Math.Round(scaledStint)</span>
                            </div>
                        }
                    </div>

                    <div class="text-left mono-font text-[var(--text-secondary)] text-sm">
                        @{ var stopCount = strategyOptions.Strategy.Length - 1; }
                        <span class="font-medium text-white">@stopCount</span> @(stopCount == 1 ? "Stop" : "Stops")
                    </div>
                </div>
            }
        </div>

        <!-- Remaining space = (root height − bars height) -->
        <div class="flex-1 flex items-center justify-center pt-6 overflow-hidden">
            <img src="/Images/Pitstop.png" alt="Pitstop"
                 class="w-[80%] max-h-full object-contain rounded-lg shadow-md" />
        </div>
    </div>
}



@code {
    [Parameter] public string GrandPrixName { get; set; }
    [Parameter] public int TotalLaps { get; set; }
    [Parameter] public int Year { get; set; } = 2025;

    private Strategies[] StrategiesArr { get; set; } = Array.Empty<Strategies>();
    private float[][] stintLifes = Array.Empty<float[]>();
    private bool isLoaded = false;
    private bool _jsInit = false;

    private (float, float) GetStintWidthScale(float stintLength, int stintNum)
    {
        const int maxWidth = 100;
        float sumOfStints = stintLifes[stintNum].Sum();
        float stintWidth = stintLength * (maxWidth / sumOfStints);
        float scaledStint = stintLength * (TotalLaps / sumOfStints);
        return (stintWidth, scaledStint);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStrategyDataAsync();
            StateHasChanged();
            return;
        }

        // After the strategies are rendered, initialize the JS sizing once
        if (isLoaded && !_jsInit)
        {
            _jsInit = true;
            await JS.InvokeVoidAsync("centerAfterBars.init",
                "#strategy-root", "#bars-wrapper", "#image-wrapper");
        }
    }

    private async Task LoadStrategyDataAsync()
    {
        var gpStrategies = new Strategies(GrandPrixName);

        StrategiesArr = await gpStrategies.GetStrategiesAsync();
        stintLifes = await Strategies.LoadAllStintLivesAsync(StrategiesArr, Year);

        isLoaded = true;
    }
}
