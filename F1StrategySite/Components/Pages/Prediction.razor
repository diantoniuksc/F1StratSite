[EnableRateLimiting("PredictionLimiter")]
@page "/prediction"
@using F1StartegySite.MLModel
@using Data

<html>
<head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
    rel="stylesheet"
    as="style"
    onload="this.rel='stylesheet'"
    href="https://fonts.googleapis.com/css2?display=swap&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900&amp;family=Space+Grotesk%3Awght%40400%3B500%3B700"
    />

    <title>Stitch Design</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
</head>
<body>
    <div
    class="relative flex size-full min-h-screen flex-col bg-[#131416] dark group/design-root overflow-x-hidden"
    style='--select-button-svg: url(&apos;data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2724px%27 height=%2724px%27 fill=%27rgb(164,170,178)%27 viewBox=%270 0 256 256%27%3e%3cpath d=%27M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z%27%3e%3c/path%3e%3c/svg%3e&apos;); font-family: "Space Grotesk", "Noto Sans", sans-serif;'
    >
        <div class="layout-container flex h-full grow flex-col">

            <div class="gap-1 px-6 flex flex-1 justify-center py-5">
                <div class="layout-content-container flex flex-col max-w-[920px] flex-1">
                    <div class="flex flex-wrap justify-between gap-3 p-4">
                        <div class="flex min-w-72 flex-col gap-3">
                            <p class="text-white tracking-light text-[32px] font-bold leading-tight">Tyre Strategy Predictor</p>
                            <p class="text-[#a4aab2] text-sm font-normal leading-normal">Enter race parameters to predict optimal lap count for a given tire compound.</p>
                        </div>
                    </div>

                    <EditForm Model="Input" OnSubmit="HandleSubmit">
                        <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
                            <label class="flex flex-col min-w-40 flex-1">
                                <p class="text-white text-base font-medium leading-normal pb-2">Driver ID</p>
                                <input
                                placeholder="e.g., VER"
                                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border border-[#42464d] bg-[#1e2124] focus:border-[#42464d] h-14 placeholder:text-[#a4aab2] p-[15px] text-base font-normal leading-normal"
                                @bind="Input!.Driver_id"
                                required
                                />
                                @if (!GPInfo.DriverIds.Contains(Input.Driver_id))
                                {
                                    <span class="text-red-500 text-sm">Invalid Driver ID. Please enter a valid F1 driver code.</span>
                                    isValid = false;
                                }
                                else
                                {
                                    isValid = true;
                                }
                            </label>
                        </div>
                        <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
                            <label class="flex flex-col min-w-40 flex-1">
                                <p class="text-white text-base font-medium leading-normal pb-2">Grand Prix Name</p>
                                <input
                                placeholder="e.g., Belgian (without Grand Prix)"
                                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border border-[#42464d] bg-[#1e2124] focus:border-[#42464d] h-14 placeholder:text-[#a4aab2] p-[15px] text-base font-normal leading-normal"
                                @bind="Circuit"
                                required
                                />
                            </label>
                        </div>
                        <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
                            <label class="flex flex-col min-w-40 flex-1">
                                <p class="text-white text-base font-medium leading-normal pb-2">Year</p>
                                <input
                                placeholder="e.g., 2023"
                                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border border-[#42464d] bg-[#1e2124] focus:border-[#42464d] h-14 placeholder:text-[#a4aab2] p-[15px] text-base font-normal leading-normal"
                                @bind="Input!.Year"
                                required
                                />
                            </label>
                        </div>
                        <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
                            <label class="flex flex-col min-w-40 flex-1">
                                <p class="text-white text-base font-medium leading-normal pb-2">Compound</p>
                                <select
                                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border border-[#42464d] bg-[#1e2124] focus:border-[#42464d] h-14 bg-[image:--select-button-svg] placeholder:text-[#a4aab2] p-[15px] text-base font-normal leading-normal"
                                @bind="Input!.Compound">
                                required
                                    <option value=null>Select Compound</option>
                                    <option value="SOFT">SOFT</option>
                                    <option value="MEDIUM">MEDIUM</option>
                                    <option value="HARD">HARD</option>

                                </select>
                            </label>
                        </div>
                        <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
                            <label class="flex flex-col min-w-40 flex-1">
                                <p class="text-white text-base font-medium leading-normal pb-2">Stint Start Lap</p>
                                <input
                                placeholder="e.g., 1"
                                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-white focus:outline-0 focus:ring-0 border border-[#42464d] bg-[#1e2124] focus:border-[#42464d] h-14 placeholder:text-[#a4aab2] p-[15px] text-base font-normal leading-normal"
                                @bind="Input!.Stint_start_lap"
                                required
                                />
                            </label>
                        </div>
                        <div class="flex px-4 py-3 justify-start">
                            <button
                            class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-10 px-4 bg-[#dae3f0] text-[#131416] text-sm font-bold leading-normal tracking-[0.015em]"
                            disabled=@IsLoading>
                                <span class="truncate">Predict</span>
                            </button>
                        </div>
                    </EditForm>
                    <div class="flex flex-col gap-3 p-4">
                        <div class="flex gap-6 justify-between">
                            <p class="text-white text-base font-medium leading-normal">Predicted Laps</p>
                            <p class="text-white text-sm font-normal leading-normal">@(Math.Round(PercentOfGp, 1).ToString())%</p>
                        </div>
                        <div class="rounded bg-[#42464d]"><div class="h-2 rounded bg-white" style="width: @(PercentOfGp.ToString() + "%");"></div></div>
                        @if(Output != null)
                        {
                            <p class="text-[#a4aab2] text-sm font-normal leading-normal">@Math.Round(Output.Score, 2) of @TotalLaps laps</p>
                        }
                        else
                        {
                            <p class="text-[#a4aab2] text-sm font-normal leading-normal">? of @(TotalLaps != 0 ? TotalLaps : "n") laps</p>
                        }
                    </div>
                </div>
                <div class="layout-content-container flex flex-col w-[360px]">
                    <div class="flex w-full grow bg-[#131416] container p-4">
                        <div class="w-full gap-1 overflow-hidden bg-[#131416] [480px]:gap-2 aspect-[3/2] rounded-xl flex">
                            <div
                            class="w-full bg-center bg-no-repeat bg-cover aspect-auto rounded-none flex-1"
                            style='background-image: url("https://images.pexels.com/photos/31204633/pexels-photo-31204633.jpeg");'
                            ></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>


@code {
    public MLModel1.ModelInput? Input { get; set; }

    public MLModel1.ModelOutput? Output { get; set; }

    public string Circuit { get; set; }

    public int TotalLaps { get; set; }
    public float PercentOfGp { get; set; }
    private bool IsLoading { get; set; }

    private bool isValid;
    protected override void OnInitialized()
    {
        if (Input == null)
        {
            Input = new MLModel1.ModelInput
            {
                Driver_id = "VER",
                Race_length = 7.004f,
                Year = 2024,
                Compound = "SOFT",
                Stint_start_lap = 1
            };
        }
        Circuit = "Belgian"; 
    }

    private async void HandleSubmit()
    {
        Console.WriteLine("Form Submitted!");
        if (!isValid)
        {
            Console.WriteLine("Invalid input. Prediction not run.");
            return;
        }
        
        IsLoading = true;

        Input!.Race_length = await ConvertCircuitNameToLength();

        Console.WriteLine($"Driver: {Input!.Driver_id}, Compound: {Input!.Compound}, Circuit: {Circuit}, Circuit Length: {Input!.Race_length}");
        Output = MLModel1.Predict(Input!); 

        if (Circuit != null)
        {
            GPInfo grandPrix = new(Circuit + " Grand Prix", (int)Input.Year);
            TotalLaps = grandPrix.GetTotalLaps();
        }

        PercentOfGp = Output.Score * 100 / TotalLaps;

        IsLoading = false;
        StateHasChanged();
    }

    private async Task<float> ConvertCircuitNameToLength()
    {
        if (Circuit != null)
        {
            return await CircutInfo.GetCircuitLengthAsync(Circuit + " Grand Prix");
        }
        else
        {
            return -1;
        }
    }

}