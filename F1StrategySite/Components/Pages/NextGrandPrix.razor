@page "/UpcomingGrandPrix"
@using Data
@using F1StrategySite.Components.Pages.AdditionalGPElements


<html>
<head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
    rel="stylesheet"
    as="style"
    onload="this.rel='stylesheet'"
    href="https://fonts.googleapis.com/css2?display=swap&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900&amp;family=Space+Grotesk%3Awght%40400%3B500%3B700"
    />

    <title>Stitch Design</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
</head>
<body>
    <div class="relative flex size-full min-h-screen flex-col bg-[#111418] dark group/design-root overflow-x-hidden" style='font-family: "Space Grotesk", "Noto Sans", sans-serif;'>
        <div class="layout-container flex h-full grow flex-col">
            <div class="px-40 flex flex-1 justify-center py-5">
                <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
                    <div class="container">
                        <div class="[480px]:px-4 [480px]:py-3">
                            <div
                            class="bg-cover bg-center flex flex-col justify-end overflow-hidden bg-[#111418] [480px]:rounded-xl min-h-[218px]"
                            style='background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0) 25%), url(@Photo);'
                            >
                                <div class="flex p-4"><p class="text-white tracking-light text-[28px] font-bold leading-tight" style="text-shadow: 0 2px 8px rgba(0,0,0,0.8), 0 0 2px #000;">@GrandPrixName</p></div>
                            </div>
                        </div>
                    </div>
                    <h2 class="text-white text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Event Details</h2>
                    <div class="p-4 grid grid-cols-[20%_1fr] gap-x-6">
                        <div class="col-span-2 grid grid-cols-subgrid border-t border-t-[#3b4554] py-5">
                            <p class="text-[#9da8b9] text-sm font-normal leading-normal">Race Name</p>
                            <p class="text-white text-sm font-normal leading-normal">@GrandPrixName</p>
                        </div>
                        <div class="col-span-2 grid grid-cols-subgrid border-t border-t-[#3b4554] py-5">
                            <p class="text-[#9da8b9] text-sm font-normal leading-normal">Circuit Name</p>
                            <p class="text-white text-sm font-normal leading-normal">@Circut</p>
                        </div>
                        <div class="col-span-2 grid grid-cols-subgrid border-t border-t-[#3b4554] py-5">
                            <p class="text-[#9da8b9] text-sm font-normal leading-normal">Location</p>
                            <p class="text-white text-sm font-normal leading-normal">@Location</p>
                        </div>
                        <div class="col-span-2 grid grid-cols-subgrid border-t border-t-[#3b4554] py-5">
                            <p class="text-[#9da8b9] text-sm font-normal leading-normal">Date and Time</p>
                            <p class="text-white text-sm font-normal leading-normal">@RaceDateTime.ToString("dd-MM-yyyy HH:mm:ss")</p>
                        </div>
                    </div>

                    <CountdownRaceWeek TargetDateTime=@(new DateTime(RaceWeek, new TimeOnly(0,0,0)))></CountdownRaceWeek>

                    <h2 class="text-white text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Circuit Information</h2>
                    <div class="flex px-4 py-3">
                        <CircuitMap Latitude=@Latitude Longitude=@Longitude />
                    </div>
                    <div class="p-4 grid grid-cols-[20%_1fr] gap-x-6">
                        <div class="col-span-2 grid grid-cols-subgrid border-t border-t-[#3b4554] py-5">
                            <p class="text-[#9da8b9] text-sm font-normal leading-normal">Lap Length</p>
                            <p class="text-white text-sm font-normal leading-normal">@CircuitLength km (@(Math.Round(CircuitLength / 1.609, 2)) mi)</p>
                        </div>
                        <div class="col-span-2 grid grid-cols-subgrid border-t border-t-[#3b4554] py-5">
                            <p class="text-[#9da8b9] text-sm font-normal leading-normal">Race Distance</p>
                            <p class="text-white text-sm font-normal leading-normal">@Math.Round(RaceDistance) km (@(Math.Round(RaceDistance / 1.609, 2)) mi)</p>
                        </div>
                        <div class="col-span-2 grid grid-cols-subgrid border-t border-t-[#3b4554] py-5">
                            <p class="text-[#9da8b9] text-sm font-normal leading-normal">Number of Laps</p>
                            <p class="text-white text-sm font-normal leading-normal">@TotalLaps</p>
                        </div>
                    </div>
                    <Weather Latitude=52.3888 Longitude=4.54092 RaceDate=@(new DateTime(2025, 08, 09, 15, 00, 00))></Weather>
                </div>
            </div>
        </div>
    </div>
</body>
</html>


@code
{
    public string GrandPrixName { get; set; }
    private string Photo { get; set; }
    public string Circut { get; set; }
    public string Location { get; set; }
    public DateTime RaceDateTime { get; set; }
    public double Latitude { get; private set; }
    public double Longitude { get; private set; }
    public DateOnly RaceWeek { get; private set; }
    public float CircuitLength { get; private set; }
    public float RaceDistance { get; private set; }
    public int TotalLaps { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        NextGPInfo nextGp = new(DateTime.Now);
        GrandPrixName = nextGp.GetNextGP();
        Photo = await nextGp.GetPhotoUrl();


        GPInfo info = new(GrandPrixName, 2025);
        Circut = await info.GetCircuitName();
        Location = await info.GetLocation();
        RaceDateTime = await info.GetRaceDateTime();
        var coords = await info.GetCircutCoordinatesAsync();
        Latitude = Convert.ToDouble(coords.Item1);
        Longitude = Convert.ToDouble(coords.Item2);
        RaceWeek = await info.GetRaceWeekStartDateAsync();
        TotalLaps = info.GetTotalLaps();

        CircuitLength = await CircutInfo.GetCircuitLengthAsync(GrandPrixName);

        RaceDistance = TotalLaps * CircuitLength;
    }
}